# Generated by Django 3.1.5 on 2021-01-26 13:11

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Group',
            fields=[
                ('GroupId', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('GroupName', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('SubjectId', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('SubjectName', models.CharField(blank=True, max_length=100)),
                ('Abbreviation', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('TermId', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('TermName', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('StudentId', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('FirstName', models.CharField(blank=True, max_length=100)),
                ('LastName', models.CharField(blank=True, max_length=100)),
                ('ComChannel', models.CharField(blank=True, max_length=100)),
                ('Gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], default='F', max_length=10)),
                ('Groups', models.ManyToManyField(related_name='groups_registered', to='core.Group')),
            ],
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('ScoreId', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('score', models.IntegerField()),
                ('Student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.student')),
                ('Subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.subject')),
                ('Term', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.term')),
            ],
        ),
        migrations.CreateModel(
            name='Leader',
            fields=[
                ('LeaderId', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('Position', models.CharField(blank=True, max_length=100)),
                ('Group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.group')),
                ('Student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.student')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
